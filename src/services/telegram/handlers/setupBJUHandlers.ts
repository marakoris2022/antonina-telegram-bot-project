import { Bot } from 'grammy';
import { getUser, updateUser } from '@/app/repositories/users';
import {
  createMainMenu,
  createCancelKeyboard,
  createActivityKeyboard,
} from '../keyboards';
import { updateSession, getSession } from '../session';
import { GOAL_DICT } from '@/lib/constants';
import { Goal, User, Activity } from '@/types/types';

export function setupBJUHandlers(bot: Bot) {
  bot.callbackQuery('menu_bju', async (ctx) => {
    try {
      const userId = ctx.from.id;
      const user = await getUser(userId);

      if (!user || !user.age || !user.gender || !user.goal || !user.height) {
        await ctx.answerCallbackQuery();
        await ctx.editMessageText(
          '‚ö†Ô∏è –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ:\n\n' +
            `- –í–æ–∑—Ä–∞—Å—Ç: ${user?.age ? '‚úÖ' : '‚ùå'}\n` +
            `- –ü–æ–ª: ${user?.gender ? '‚úÖ' : '‚ùå'}\n` +
            `- –¶–µ–ª—å: ${user?.goal ? '‚úÖ' : '‚ùå'}\n` +
            `- –†–æ—Å—Ç: ${user?.height ? '‚úÖ' : '‚ùå'}`,
          { reply_markup: createMainMenu() }
        );
        return;
      }

      updateSession(userId, {
        currentMenu: 'menu_bju',
        bjuStep: 'weight',
      });

      await ctx.answerCallbackQuery();
      await ctx.editMessageText(
        `<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–µ—Å (–∫–≥):</b>\n` +
          `\n` +
          `<i>–ü—Ä–∏–º–µ—Ä: 70</i>\n` +
          `–î–∞–Ω–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£.`,
        {
          reply_markup: createCancelKeyboard(),
          parse_mode: 'HTML',
        }
      );
    } catch (error) {
      console.error('Error in BJU calculation:', error);
      await ctx.answerCallbackQuery();
      await ctx.editMessageText(
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: createMainMenu() }
      );
    }
  });

  bot.on('message:text').filter(
    (ctx) => {
      const session = getSession(ctx.from.id);
      return !!session.bjuStep;
    },
    async (ctx) => {
      try {
        const userId = ctx.from.id;
        const text = ctx.message.text;
        const session = getSession(userId);

        switch (session.bjuStep) {
          case 'weight':
            const weight = parseFloat(text);
            if (isNaN(weight) || weight <= 0) {
              throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
            }
            updateSession(userId, {
              editTempData: { ...session.editTempData, weight },
              bjuStep: 'activity',
            });
            await ctx.reply(
              `<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n\n` +
                `\n` +
                `<b>1.</b> ${getActivityDescription('sedentary')}\n` +
                `\n` +
                `<b>2.</b> ${getActivityDescription('lightly_active')}\n` +
                `\n` +
                `<b>3.</b> ${getActivityDescription('moderately_active')}\n` +
                `\n` +
                `<b>4.</b> ${getActivityDescription('very_active')}`,
              {
                reply_markup: createActivityKeyboard(),
                parse_mode: 'HTML',
              }
            );
            return;
        }
      } catch (error) {
        await ctx.reply(
          `‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`,
          { reply_markup: createCancelKeyboard() }
        );
      }
    }
  );

  bot.callbackQuery(
    [
      'activity_sedentary',
      'activity_lightly_active',
      'activity_moderately_active',
      'activity_very_active',
    ],
    async (ctx) => {
      let activityLevel: Activity = 'moderately_active';

      switch (ctx.callbackQuery.data) {
        case 'activity_sedentary':
          activityLevel = 'sedentary';
          break;
        case 'activity_lightly_active':
          activityLevel = 'lightly_active';
          break;
        case 'activity_moderately_active':
          activityLevel = 'moderately_active';
          break;
        case 'activity_very_active':
          activityLevel = 'very_active';
          break;
      }

      const session = getSession(ctx.from.id);

      session.editTempData.activity = activityLevel;

      await ctx.answerCallbackQuery();

      const user = await getUser(ctx.from.id);
      if (!user) throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');

      const updatedUser = {
        ...user,
        weight: session.editTempData?.weight,
        activity: activityLevel,
        userId: ctx.from.id,
      };

      const bju = calculateBJU(updatedUser);

      await updateUser(ctx.from.id, {
        weight: session.editTempData?.weight,
        activity: activityLevel,
        lastBJU: {
          ...bju,
          lastBJUDate: new Date(),
        },
      });

      updateSession(ctx.from.id, {
        bjuStep: null,
        currentMenu: 'menu_main',
        editTempData: undefined,
      });

      await ctx.editMessageText(
        `üçè –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –ë–ñ–£:\n\n` +
          `‚öñÔ∏è –ö–∞–ª–æ—Ä–∏–∏: ${bju.calories} –∫–∫–∞–ª\n` +
          `ü•© –ë–µ–ª–∫–∏: ${bju.proteins} –≥\n` +
          `ü•ë –ñ–∏—Ä—ã: ${bju.fats} –≥\n` +
          `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${bju.carbs} –≥\n\n` +
          `–¶–µ–ª—å: ${GOAL_DICT[user.goal as Goal]}\n` +
          `–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–µ—Å: ${session.editTempData?.weight} –∫–≥\n` +
          `–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${getActivityDescription(activityLevel)}`,
        { reply_markup: createMainMenu() }
      );
    }
  );

  bot.callbackQuery('cancel_edit', async (ctx) => {
    updateSession(ctx.from.id, {
      bjuStep: null,
      currentMenu: 'menu_main',
      editTempData: undefined,
    });
    await ctx.answerCallbackQuery();
    await ctx.editMessageText('–†–∞—Å—á–µ—Ç –ë–ñ–£ –æ—Ç–º–µ–Ω–µ–Ω', {
      reply_markup: createMainMenu(),
    });
  });
}

function getActivityDescription(activityLevel?: Activity): string {
  if (!activityLevel) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

  const descriptions = {
    sedentary: '(1200) –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (–º–∞–ª–æ –∏–ª–∏ –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)',
    lightly_active: '(1375) –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ª–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é)',
    moderately_active:
      '(1550) –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–º–µ—Ä–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)',
    very_active:
      '(1725) –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 6-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)',
  };

  return descriptions[activityLevel] || activityLevel;
}

function getActivityFactor(activityLevel?: Activity): number {
  if (!activityLevel) return 1.2;

  const factors = {
    sedentary: 1.2,
    lightly_active: 1.375,
    moderately_active: 1.55,
    very_active: 1.725,
  };

  return factors[activityLevel] || 1.2;
}

function calculateBJU(user: User) {
  let bmr: number;
  if (user.gender === 'male') {
    bmr = 10 * user.weight! + 6.25 * user.height! - 5 * user.age! + 5;
  } else {
    bmr = 10 * user.weight! + 6.25 * user.height! - 5 * user.age! - 161;
  }

  const activityFactor = getActivityFactor(user.activity);
  const tdee = bmr * activityFactor;

  let calories: number;
  switch (user.goal) {
    case 'lose_weight':
      calories = tdee - 200;
      break;
    case 'gain_weight':
      calories = tdee + 200;
      break;
    case 'maintain_weight':
    default:
      calories = tdee;
  }

  let proteinK = 1.8;
  if (user.goal === 'lose_weight') {
    proteinK = 1.6;
  } else if (user.goal === 'gain_weight') {
    proteinK = 2.3;
  }

  const proteins = Math.round(user.weight! * proteinK * 10) / 10;
  const fatsK = 1;
  const fats = Math.round(user.weight! * fatsK * 10) / 10;

  let carbsK = 3;
  if (user.goal === 'lose_weight') {
    carbsK = 2;
  } else if (user.goal === 'gain_weight') {
    carbsK = 4;
  }

  const carbs = Math.round(user.weight! * carbsK * 10) / 10;

  return {
    calories: Math.round(calories),
    proteins: Math.round(proteins),
    fats: Math.round(fats),
    carbs: Math.round(carbs),
  };
}
