import { createUser, getUser } from '@/app/api/telegram/actions';
import { Bot, webhookCallback } from 'grammy';

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN!);

bot.command('start', async (ctx) => {
  const user = ctx.update.message?.from;

  if (user) {
    const userFromDB = await getUser(user.id);

    if (!userFromDB) {
      try {
        await createUser({
          userId: user.id,
          username: user.username || '',
          firstName: user.first_name || '',
          lastName: user.last_name || '',
          userLang: user.language_code || '',
        });
      } catch (error) {
        console.error('Error creating user:', error);
      }
    }

    await ctx.reply(
      `‚ú® –ü—Ä–∏–≤–µ—Ç${userFromDB ? ' —Å–Ω–æ–≤–∞' : ''}, ${
        user.first_name || '–¥—Ä—É–≥'
      }! ‚ú®\n\n` +
        `–†–∞–¥—ã ${
          userFromDB ? '–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞' : '–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'
        } –≤ Antonina Fitness ‚Äì –º–µ—Å—Ç–µ, –≥–¥–µ \n` +
        `–∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å, –∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–±—Ä–∞–∑–æ–º –∂–∏–∑–Ω–∏ üí™\n\n` +
        `${
          userFromDB
            ? '–¢–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä —Å–∫—É—á–∞–ª! –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
            : '–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–ø—É—Ç—å –≤–º–µ—Å—Ç–µ!'
        }`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: userFromDB
                  ? 'üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å'
                  : 'üåü –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
                web_app: { url: process.env.NEXT_PUBLIC_WEBAPP_URL! },
              },
            ],
            [
              {
                text: 'üíå –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É',
                url: 'https://t.me/antonyusik',
              },
            ],
          ],
        },
        parse_mode: 'HTML',
      }
    );
  }
});

bot.on('message:text', async (ctx) => {
  const warmReplies = [
    '–û—Ç–∫—Ä—ã–≤–∞—é –¥–≤–µ—Ä—å –≤ –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–º–∏—Ä... üåà',
    '–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç, –≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ... ‚ú®',
    '–ê–Ω—Ç–æ–Ω–∏–Ω–∞ —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å! –û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ... üíñ',
  ];

  await ctx.reply(warmReplies[Math.floor(Math.random() * warmReplies.length)], {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üèãÔ∏è‚Äç‚ôÄÔ∏è –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: process.env.NEXT_PUBLIC_WEBAPP_URL! },
          },
        ],
        // [
        //   {
        //     text: 'üëã –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫',
        //     callback_data: 'welcome_gift',
        //   },
        // ],
      ],
    },
  });
});

// bot.callbackQuery('welcome_gift', async (ctx) => {
//   try {
//     await ctx.answerCallbackQuery({ 
//       text: 'üîÑ –ì–æ—Ç–æ–≤–∏–º –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫...' 
//     }).catch(e => console.log("Already answered"));

//     const user = await getUser(ctx.from.id).catch(() => null);
    
//     if (user?.gift_claimed) {
//       await ctx.editMessageText('üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Ä–∞–Ω–µ–µ!');
//       return;
//     }

//     await ctx.replyWithPhoto('https://example.com/gift.jpg', {
//       caption: `üéâ ${ctx.from.first_name}, –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫!`
//     });

//     await updateUser(ctx.from.id, { gift_claimed: true });
    
//   } catch (error) {
//     console.error('Gift error:', error);
//     await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä—É @AntoninaCoach');
//   }
// });

bot.api.setChatMenuButton({
  menu_button: {
    type: 'web_app',
    text: '–ú–æ–π –§–∏—Ç–Ω–µ—Å-–î—Ä—É–≥', // –≤–º–µ—Å—Ç–æ "Fitness App"
    web_app: { url: process.env.NEXT_PUBLIC_WEBAPP_URL! },
  },
});

export async function POST(request: Request) {
  try {
    const handler = webhookCallback(bot, 'std/http');
    const response = await handler(request);
    response.headers.set('Access-Control-Allow-Origin', '*');
    return response;
  } catch (error) {
    console.error('Error:', error);
    return new Response('Server Error', { status: 500 });
  }
}

export async function OPTIONS() {
  return new Response(null, {
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
    },
  });
}

export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';
